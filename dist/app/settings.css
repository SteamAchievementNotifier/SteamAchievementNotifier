body[soundonly] #settingscontent > .cont:has(.title#notifications) > .optcont > .opt:not(:has(#soundonly,#nowtracking)),
body[soundonly] #settingscontent > .cont:has(.title#media) > .optcont > .opt,
body[soundonly] #settingscontent #ovtabs,
body[muted] .cont:has(.title#sound) > .optcont > .opt,
body[nativeos] #settingscontent .cont:has(.title#media) .opt:has(select#screenshots),
body[nativeos] #settingscontent .cont:has(.title#media) .opt[overlay],
body[nativeos] #ovtabs,
body[active] #settingscontent > .cont:has(.title#notifications) > .optcont > .opt:has(#noiconcache),
body[active] #settingscontent > .cont:has(.title#advanced) > .optcont > .opt:has(#pollrate,#maxretries,#userust),
dialog[menu] #settingscontent > .cont:has(.title#media) > .optcont:has(#ovmatch:checked) > .opt:has(select#ovpos),
body[beta] button#checkforupdates {
    opacity: 0.5;
    pointer-events: none;
}

body[soundonly] #settingscontent > .cont:has(.title#notifications) > .optcont > .opt:not(:has(#soundonly,#nowtracking)) > input[type="checkbox"] {
    background-color: var(--darkgrey);
}

dialog[menu] > #content {
    display: grid;
    grid-template-rows: auto 1fr auto;
    place-self: start;
    gap: 0.75rem;
    height: 100vh;
    width: 40%;
    translate: -50vw 0;
    scale: 1;
    padding: 1.25rem 1.5rem 1rem;
    transition:
        translate var(--transition),
        width var(--transition);
    transition-timing-function: ease;
    transition-delay: 0s;
}

dialog[open][menu] > #content[open] {
    translate: 0;
    transition:
        translate var(--transition),
        width var(--transition);
    transition-timing-function: ease;
    transition-delay: 0s;
}

dialog[menu] .contentwrapper > .wrapper#contentcontainer {
    display: none;
}

#settingsheader > * {
    grid-column-start: 1;
    grid-row-start: 1;
    align-self: center;
}

#settingsheader > span {
    justify-self: center;
    font-size: 1.5rem;
    text-transform: uppercase;
}

#settingsheader > .menubtn#settingsclose {
    --icon: url("../../icon/close.svg");
    justify-self: end;
}

#settingscontent {
    --primary: #203e7a;
    display: block;
    padding-right: 1rem;
    overflow: hidden scroll;
}

.cont {
    height: fit-content;
    font-size: 0.8rem;
    background-color: #2b2b2b;
    border-radius: var(--elembr);
    overflow: hidden;
}

.cont:not(:last-child) {
    margin-bottom: 1rem;
}

.title {
    grid-template-columns: auto auto;
    justify-items: start;
    align-items: center;
    gap: 0.5rem;
    padding: 0.25rem;
    background-color: var(--primary);
    transition: background-color var(--transition);
    text-transform: uppercase;
}

.title:before {
    content: "";
    display: block;
    background: var(--icon) center / contain no-repeat;
    width: 0.85rem;
    height: 0.85rem;
    justify-self: end;
}

.cont:has(#language) > .title::before {
    --icon: url("../../icon/language.svg");
}

.cont:has(#os) > .title::before {
    --icon: url("../../icon/windows.svg");
}

.cont:has(#notifications) > .title::before {
    --icon: url("../../icon/notifications.svg");
}

.cont:has(#games) > .title::before {
    --icon: url("../../icon/controller.svg");
}

.cont:has(#media) > .title::before {
    --icon: url("../../icon/camera.svg");
}

.cont:has(#streaming) > .title::before {
    --icon: url("../../icon/videocam.svg");
}

.cont:has(#accessibility) > .title::before {
    --icon: url("../../icon/accessibility.svg");
}

.cont:has(#advanced) > .title::before {
    --icon: url("../../icon/build.svg");
}

.cont:has(#ra) > .title::before {
    --icon: url("../../icon/joystick.svg");
}

.cont:has(#misc) > .title::before {
    --icon: url("../../icon/misc.svg");
}

.optcont {
    padding: 0.7rem;
    gap: 0.5rem;
}

.opt {
    grid-template-columns: 1fr auto;
    grid-template-rows: 1fr;
    align-items: center;
    gap: 0.5rem 1rem;
    font-size: 0.7rem;
}

.opt:has(input[type="range"]) {
    grid-template-columns: auto auto;
}

.opt:has(select) {
    gap: 0;
}

.opt > span {
    justify-self: start;
    text-wrap: balance;
    word-break: break-word;
    cursor: pointer;
}

.opt:has(span:hover) > input[type="checkbox"]:not(:checked) {
    background-color: #3d3d3d;
}

.opt:has(#nowtracking:not(:checked)) ~ .wrapper:has(#nowtrackingscale,#nowtrackingpos),
.opt:has(#shortcuts:not(:checked)) + .wrapper:has(#shortcuttabs),
.opt:has(#webhooks:not(:checked)) + .wrapper#webhookwrapper,
.opt:has(#steamlang:not(:checked)) + .wrapper:has(#maxsteamlangretries),
.opt:has(#extwin:not(:checked)) ~ .wrapper:has(#extwinframerate,#extwinshow),
.opt:has(#statwin:not(:checked)) + .wrapper:has(#statwinaot),
.opt:has(#customtrigger:not(:checked)) ~ .wrapper:has(#customtriggershortcut,#customtriggerdelay) {
    display: none;
}

.opt:has(#ssenabled:not(:checked)) ~ .opt:has(#ovpos,#ovmatch,.lbl#sselemselectorlbl,#ovpath,#imgpath,#ssdelay,#sspreview),
.opt:has(#ssenabled:not(:checked)) ~ .wrapper[overlay]:has(> .wrapper[overlay]):has(#ovx,#ovy) {
    display: none !important;
}

dialog[menu] #settingscontent .opt:has(select) > span:not(.lbl) {
    display: flex;
    align-items: center;
    line-height: 1;
}

.shortcutbtn {
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    background-color: #101010;
    border-radius: 0 0 var(--elembr) var(--elembr);
    transition: background-color var(--transition);
    animation: none;
}

.shortcutbtn:hover {
    background-color: #3d3d3d;
}

.shortcutbtn[set] {
    animation: fadetoblue 0.5s alternate infinite forwards;
    pointer-events: none;
}

@keyframes fadetoblue {
    to { background-color: var(--primary); }
}

.shortcutbtn[error] {
    background-color: red;
    pointer-events: none;
}

.opt:has(> button[id$="shortcut"]) {
    gap: 0;
}

#settingscontent .cont:has(.title#notifications,.title#streaming,.title#advanced) .opt:has(input[type="range"],select) {
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
}

.settingstabs {
    --tabbr: var(--elembr);
    grid-template-columns: repeat(3,auto);
}

.settingstabs > .tab:first-child {
    border-radius: var(--elembr) 0 0 var(--tabbr);
}

.settingstabs > .tab:nth-child(3) {
    border-radius: 0 var(--elembr) var(--tabbr) 0;
}

.settingstabs#shortcuttabs {
    --tabbr: 0;
}

.settingstabs#ovtabs {
    margin-block: 0.25rem;
}

.wrapper:has(.shortcutbtn[set]) > .wrapper#shortcuttabs > .tab,
.wrapper:has(.shortcutbtn[error]) > .wrapper#shortcuttabs > .tab {
    pointer-events: none;
}

.optcont > button {
    grid-template-columns: auto auto;
    justify-items: start;
    align-items: center;
    gap: 0.5rem;
    padding: 0.25rem;
    font-size: 0.7rem;
    border-radius: var(--elembr);
    transition: background-color var(--transition);
}

.optcont > button::before {
    content: "";
    display: block;
    justify-self: right;
    width: 0.85rem;
    height: 0.85rem;
    background: var(--icon) center / contain no-repeat;
    transition: rotate calc(var(--transition) * 2);
}

dialog[menu]:has(#settingscontent) *[overlay]:not(.synclbl),
dialog[menu]:has(#settingscontent) *[notifyimg]:not(.synclbl) {
    display: none;
}

dialog[menu]:has(#settingscontent) .optcont:has(select#screenshots > option[value="overlay"]:checked) *[overlay]:not(.synclbl),
dialog[menu]:has(#settingscontent) .optcont:has(select#screenshots > option[value="notifyimg"]:checked) *[notifyimg]:not(.synclbl) {
    display: grid;
}

.wrapper[overlay]:has(> .wrapper[overlay]):has(#ovx) {
    gap: 0.5rem;
    margin-block: 0.5rem;
}

dialog[menu]:has(#settingscontent) .optcont:has(.wrapper[overlay]) > .opt:last-child {
    margin-top: 0.5rem;
}

dialog[menu] #settingscontent .opt:has(button.rect) {
    grid-template-columns: 1fr;
    gap: 0;
}

dialog[menu] #settingscontent button.rect {
    grid-template-columns: auto auto;
    justify-items: start;
    align-items: center;
    gap: 0.25rem;
    width: 100%;
    height: 100%;
    min-height: 1.5rem;
    font-size: 0.75rem;
    border-radius: var(--elembr);
}

dialog[menu] #settingscontent button.rect > span {
    padding: 0;
}

dialog[menu] #settingscontent button.rect::before {
    content: "";
    display: block;
    justify-self: end;
    width: 1rem;
    height: 1rem;
    background: var(--icon) center / contain no-repeat;
    margin: 0;
}

dialog[menu] #settingscontent button.rect:hover::before {
    filter: none;
}

body[main] .rect#sspreview {
    --icon: url("../../icon/trophy_gold.svg");
}

body[rare] .rect#sspreview {
    --icon: url("../../icon/trophy_purple.svg");
}

body[plat] .rect#sspreview {
    --icon: url("../../icon/trophy_plat.svg");
}

#linkedgames {
    --icon: url("../../icon/link.svg");
    background-color: #1e90ffb5;
}

#linkedgames:hover {
    background-color: #1e90ff;
}

#exclusionlist {
    --icon: url("../../icon/exclusion.svg");
    background-color: #000000b5;
}

#exclusionlist:hover {
    background-color: #000000;
}

#themeswitch {
    --icon: url("../../icon/autoswitchtheme.svg");
    position: relative;
    background-color: #7830adb5;
}

#themeswitch:hover {
    background-color: #7830ad;
}

body[themeswitch] #themeswitch::after {
    content: "";
    display: block;
    width: 0.75rem;
    height: 0.75rem;
    position: absolute;
    right: 0.5rem;
    background: url("../../icon/dot_green.png") center / contain no-repeat;
}

.opt:has(input#usecustomfiles:not(:checked)) + button#showcustomfiles {
    display: none;
}

#showcustomfiles {
    --icon: url("../../icon/customfiles.svg");
    background-color: #5662f6b5;
}

#showcustomfiles:hover {
    background-color: #5662f6;
}

#checkforupdates {
    --icon: url("../../icon/update_white.svg");
    background-color: #1b8945b5;
}

#checkforupdates:hover {
    background-color: #1b8945;
}

#log {
    --icon: url("../../icon/clipboard.svg");
    background-color: #4169e1b5;
}

#log:hover {
    background-color: #4169e1;
}

#reset {
    --icon: url("../../icon/reset.svg");
    background-color: #b90505b5;
}

#reset:hover {
    background-color: #b90505;
}

#reset:hover::before {
    rotate: 360deg;
}

#settingscontent:has(#showsystrayopts:not(:checked)) .cont:has(.title#misc) button[systray] {
    display: none;
}

button[systray] {
    background-color: #505050b5;
}

button[systray]:hover {
    background-color: #505050;
}

#resetwindow {
    --icon: url("../../icon/resetwin.png");
}

#releasegame {
    --icon: url("../../icon/donotdisturb.svg");
}

#suspendresume {
    --icon: url("../../icon/power.svg");
}

#suspendresume::before {
    mask: var(--icon) center / contain no-repeat;
    background: red;
}

#suspendresume[suspend]::before {
    background: limegreen;
}

#restartapp {
    --icon: url("../../icon/replay.svg");
    margin-bottom: 1rem;
}

.wrapper#settingsversion {
    grid-template-columns: auto auto;
    gap: 0.15rem;
    font-size: 0.6rem;
    opacity: 0.5;
    align-items: center;
}

.wrapper#settingsversion > :nth-child(1) {
    justify-self: end;
}

.wrapper#settingsversion > :nth-child(2) {
    justify-self: start;
}

.wrapper#webhookwrapper {
    margin-top: 0.25rem;
    gap: 0.5rem;
}

span#webhookcaution {
    font-size: 0.5rem;
    background-color: var(--primary);
    padding: 0.5rem 0.75rem;
    outline: 0.1rem solid red;
    border-radius: var(--elembr);
    text-wrap: pretty;
    margin-bottom: 0.25rem;
}

span#webhookcaution,
span#webhookcaution > * {
    user-select: all;
}

.multiselect {
    grid-template-columns: 1fr;
    margin: 0 !important;
    padding: 0.35rem 0.5rem;
    background-color: var(--darkgrey);
    margin-top: 0;
}

.multiselect > .wrapper {
    grid-template-columns: 1fr auto auto;
    grid-template-rows: 1fr;
    column-gap: 0.5rem;
    margin-top: 0.35rem;
}

.multiselect#raemuswrapper > .wrapper {
    grid-template-columns: 1fr auto;
}

input[id^="webhookembedcolor"] {
    width: 1rem;
    height: 1rem;
    grid-column-start: 2;
    grid-row-start: 1;
    border-radius: 0.15rem;
}

input[type="color"][id^="webhookembedcolor"]::-webkit-color-swatch {
    border-radius: 0;
}

input[type="checkbox"][id^="webhook"] {
    grid-column-start: 3;
}

.multiselect > .wrapper:first-child {
    margin: 0;
}

.multiselect > .wrapper:has(> input[type="checkbox"]) > input[type="checkbox"]:not(:checked) {
    background-color: var(--mediumgrey);
}

.multiselect > .wrapper:has(> input[type="checkbox"]) > input[type="checkbox"]:not(:checked):hover,
.multiselect > .wrapper:has(span:hover) > input[type="checkbox"]:not(:checked) {
    background-color: var(--lightgrey);
}

.multiselect .wrapper:has(> input) > span::before {
    --trophy: url("../../icon/trophy_gold.svg");
    content: "";
    display: inline-block;
    width: 0.7rem;
    height: 0.7rem;
    margin-right: 0.25rem;
    background: var(--trophy) center / contain no-repeat;
    vertical-align: -0.1rem;
}

.multiselect .wrapper:has(> input[id$="rare"]) > span::before {
    --trophy: url("../../icon/trophy_purple.svg");
}

.multiselect .wrapper:has(> input[id$="plat"]) > span::before {
    --trophy: url("../../icon/trophy_plat.svg");
}

.multiselect .wrapper:has(> input[id$="test"]) > span::before {
    --trophy: url("../../icon/beta.svg");
}

.wrapper:has(> #webhooklaststatus) {
    grid-template-columns: max-content 1fr;
    gap: 0;
    place-content: center;
    margin-top: 0.15rem;
    pointer-events: none;
}

.wrapper:has(> #webhooklaststatus) > span:first-child,
#webhooklaststatus {
    padding: 0.1rem 0.25rem;
}

.wrapper:has(> #webhooklaststatus) > span:first-child {
    background-color: var(--primary);
    border-radius: var(--elembr) 0 0 var(--elembr);
}

#webhooklaststatus {
    width: 100%;
    background-color: var(--darkgrey);
    border-radius: 0 var(--elembr) var(--elembr) 0;
    text-align: center;
}

#webhooklaststatus[ok] {
    background-color: limegreen;
}

#webhooklaststatus[error] {
    background-color: red;
}

.opt#raemuswrapper .opt:has(> input[type="text"]) {
    grid-template-columns: 1fr auto;
}

.opt#raemuswrapper .opt:has(> input[type="text"]) > button.rect {
    --icon: url("../../icon/search.svg");
    grid-template-columns: 1fr;
    gap: 0;
    grid-column-start: 2;
    grid-row-start: 2;
    width: 2rem;
    border-radius: 0 var(--elembr) var(--elembr) 0;
}

.opt#raemuswrapper .opt:has(> input[type="text"]) > button.rect::before {
    place-self: center;
}

.opt#raemuswrapper .opt:has(> input[type="text"]) > button.rect:hover::before {
    filter: invert();
}

.multiselect#raemuswrapper .wrapper:has(> input#retroarch) > span::before {
    --trophy: url("../../img/ra/retroarch.png");
}

.multiselect#raemuswrapper .wrapper:has(> input#dolphin) > span::before {
    --trophy: url("../../img/ra/dolphin.png");
}

.multiselect#raemuswrapper .wrapper:has(> input#pcsx2) > span::before {
    --trophy: url("../../img/ra/pcsx2.png");
}

.multiselect#raemuswrapper .wrapper:has(> input#duckstation) > span::before {
    --trophy: url("../../img/ra/duckstation.png");
}

.opt#raemuswrapper input[type="text"] {
    grid-column-start: 1;
    background-color: var(--mediumgrey);
    border-radius: 0 0 0 var(--elembr);
    transition: background-color var(--transition);
    text-overflow: ellipsis;
    direction: rtl;
}

.opt#raemuswrapper input[type="text"]:focus {
    background-color: var(--lightgrey);
    text-overflow: clip;
    direction: ltr !important;
}

.opt#raemuswrapper input[type="text"][nodir] {
    background-color: red;
}

.opt#raemuswrapper input[type="text"][nodir]:hover {
    background-color: darkred;
}

.opt#raemuswrapper input[type="text"]:hover {
    background-color: var(--lightgrey);
}

.opt#raemuswrapper .opt:has(> input[type="text"]) > span::before {
    content: none;
}

dialog[menu] #settingscontent .opt#raemuswrapper .opt:has(> input[type="checkbox"]) {
    grid-template-columns: 1fr auto;
}

.opt#raemuswrapper .opt:has(> input[type="checkbox"]:not(:checked)) .opt:has(input[type="text"]) {
    display: none;
}

.opt#raemuswrapper .opt:has(> input[type="checkbox"]:checked) {
    margin-bottom: 0.5rem;
}

.opt:has(#rapercenttype) {
    grid-template-columns: 2fr 1fr;
}

body[raemu="retroarch"][ragameid] .multiselect#raemuswrapper .wrapper:has(> input#retroarch) > span::after,
body[raemu="dolphin"][ragameid] .multiselect#raemuswrapper .wrapper:has(> input#dolphin) > span::after {
    content: "";
    background: url("../../icon/dot_green.png") center / contain no-repeat;
    display: inline-block;
    width: 0.5rem;
    height: 0.5rem;
    margin-left: 0.25rem;
    vertical-align: middle;
}

.wrapper#rastatuswrapper {
    font-size: 0.6rem;
    padding: 0.25rem 0.5rem;
    background-color: var(--primary);
    border-radius: var(--elembr);
}

.wrapper#rastatuswrapper > div {
    grid-template-columns: 1fr 4fr;
}

.wrapper#rastatuswrapper > div#rastatus > span:nth-child(2)::before {
    content: var(--rastatus);
}

body[ragamename] .wrapper#rastatuswrapper > div#ragame > span:nth-child(2)::before {
    content: var(--ragamename);
}

body:not([ragameid]) .wrapper#rastatuswrapper > div#ragame > span:nth-child(2):after {
    content: "-";
}

body[ragameid] .wrapper#rastatuswrapper > div#ragame > span:nth-child(2):after {
    content: " [" var(--ragameid) "]";
}

span#raloghelp {
    font-size: 0.65rem;
    text-align: center;
}

.hllb {
    color: var(--lightblue);
}

.hlgreen {
    color: seagreen;
}

.hlred {
    color: firebrick;
}

.opt:has(> select#colorprofile) {
    margin-bottom: 0.5rem;
}

.rect#replaynotify {
    --icon: url("../../icon/history.svg");
}

body[allowreplay] dialog[menu] #settingscontent button.rect#replaynotify:hover::before {
    filter: invert();
}

body:not([allowreplay]) #settingscontent button.rect#replaynotify {
    cursor: not-allowed;
}

body:not([allowreplay]) #settingscontent button.rect#replaynotify > span {
    filter: none;
}

body:not([allowreplay]) #settingscontent button.rect#replaynotify::after {
    background-color: red;
}

@media (orientation: portrait) {
    dialog[menu] > #content {
        width: 100%;
    }
}